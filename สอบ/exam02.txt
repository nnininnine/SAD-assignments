10. ans:
Service-oriented architecture(SOA) เพราะว่า SOA นั้นจะทำให้ software มีลักษณะที่ยืดหยุ่นต่อการใช้งานมากขึ้นและลดความซับซ้อนลง โดยการแบ่งเป็น services ต่าง ๆ 
และติดต่อสื่อสารระหว่างกันผ่านทาง ESB ซึ่งน่าจะตอบโจทย์ที่ทั้งสองบริษัทต้องการที่จะรวมกันเพราะจะช่วยให้ทั้ง 2 สามารถทำงานร่วมกัน และไม่จำเป็นที่จะต้องทราบรายละเอียดของ
service ที่ใช้ อีกทั้งยังรองรับการขยายระบบ และเชื่อมต่อระบบอื่นๆ (Integration) ในอนาคตได้อีกด้วย

11. ans:
Pipes and filters เพราะ software ที่ต้องการเป็นการส่งข้อมูลไปในทางเดียวโดยมีลูกค้าผู้ใช้บริการเป็นปลายทาง และเป็นการส่งข้อมูลผ่าน pipe ไปเข้า filter ต่อกันไป
เรื่อย ๆ จนถึงปลายทางทำให้สามารถกรองข้อมูลเพื่อรองรับลูกค้าแต่ละคนได้

12. ans:
Layered เพราะเราสามารถแก้ไขบางส่วนของระบบโดยที่ไม่กระทบกับส่วนอื่นเพราะแต่ละส่วนจะเป็นอิสระต่อกัน สามารถนำไปรวมกับส่วนอื่น ๆ ได้ และ Layered จะแบ่งเป็นชั้น ๆ
ทำงานไล่กันลงมา ทำให้สามารถมองการทำงานของระบบได้ง่ายว่าถ้าหากมีปัญหาจะเกิดจากส่วนไหน

13. ans:
Peer to peer เพราะเป็น Architectural Style ที่ลูกค้าซึ่งถือเป็น Peer สามารถมีปฏิสัมพันธ์ระหว่างกันได้เอง โดยไม่ต้องผ่านระบบส่วนกลางขององค์กร

14. ans:
Map reduce เพราะเป็นการแบ่งข้อมูลที่มีมากออกเป็นส่วน ๆ และนำไปประมวลผลแยกกันในแต่ละส่วน จากนั้นค่อยนำมารวมกันและใช้งาน ทำให้ใช้ระยะเวลาในการประมวลผลนับยอดข้อมูลได้สั้นลง

15. ans:
MVC เพราะเป็น Architectural Style ที่มีการแยกเป็น Model, View, และ Controller ซึ่งในโจทย์ต้องการที่จะปรับเปลี่ยนส่วนการนำเสนอซึ่งก็คือ View และ MVC จะช่วยรองรับให้แก้ไขได้ง่าย
คือแก้ไขเฉพาะส่วนของ View

16. ans:
ASR คือ requirement ต่าง ๆ ที่มีผลต่อการออกแบบตัวสถาปัตยกรรมซอฟต์แวร์

โดยมีความสำคัญคือ เป็นสิ่งที่ช่วยให้การออกแบบสถาปัตยกรรมซอฟต์แวร์ เป็นไปตามความต้องการอย่างอื่นที่นอกเหนือจาก functional requirement ด้วยเช่น "ระบบจะต้องส่งข้อมูลตอบกลับหาผู้ใช้ไม่เกิน 5 วินาที" ซึ่งถือเป็นความต้องการในเรื่องของ performance ที่ระบบจะต้องออกแบบมาเพื่อให้รองรับ และเป็นความต้องการที่จะต้องสรุปให้นิ่งและออกแบบระบบให้รองรับให้ได้เพราะจะมีผลกระทบต่อระบบอย่างมาก ซึ่งเป็นเรื่องยากจนถึงไม่สามารถที่จะพัฒนาระบบไปแล้วกลับมาแก้ไขตาม ASR ในภายหลังได้

ซึ่งเราสามารถหา ASR ได้จาก
- Requirement Documentation
- Service Level Agreement (SLA)
- Applicable Standards, Policies or Guidelines
- Business goal
- Interview Stakeholders

17. ans:
กระบวนการ ATAM มีขั้นตอนดังนี้
1. Present ATAM - นำเสนอแนวคิดของ ATAM ให้กับ stakeholders และตอบคำถามเกี่ยวกับ process 
2. Present business drivers - ผู้ที่เกี่ยวข้อง นำเสนอ ทำความเข้าใจ และประเมิน business drivers ของระบบ
3. Present the architecture - ผู้ออกแบบนำเสนอภาพรวมโดยย่อของสถาปัตยกรรมของระบบโดยมีรายละเอียดที่เหมาะสม
4. Identify architectural approaches - ทีมงานจะนำเสนอแนวทางสถาปัตยกรรมต่างๆ ของระบบและจะมีการพิจารณาร่วมกัน
5. Generate quality attribute utility tree - core business และ technical requirements ของระบบจะถูกกำหนดในขั้นตอนนี้ และ map ลง architectural property ที่เหมาะสม
6. Analyze architectural approaches - วิเคราะห์แต่ละสถานการณ์, กำหนดความสำคัญของแต่ละสถานการณ์ จากนั้นสถานการณ์ที่มีคะแนนสูงจะถูก map เข้ากับ architecture
7. Brainstorm and prioritize scenarios - กลุ่ม stakeholders ที่เยอะขึ้นจะมานำเสนอสถานการณ์ที่เลือก และคุยกันเรื่องข้อกังวล
8. Analyze architectural approaches - ทำเหมือนขั้นตอนที่ 6 ด้วย knowledge ที่มาจาก stakeholders ที่มากขึ้น(จากข้อ 7)
9. Present results - จัดเตรียมเอกสารทั้งหมดให้กับ stakeholders และนำเสนอ

18. ans:
ขั้นตอน Generate quality attribute utility tree เป็นขั้นตอนที่รองรับการนำเสนอ scenario และเป็นขั้นตอนเดียวกับ ATAM